import { useState, useEffect } from "react";
import { motion } from "framer-motion";
import EnhancedChatPanel from "./EnhancedChatPanel";
import ActivePersonas from "./ActivePersonas";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { PERSONA_COLORS, PERSONA_STATUS } from "../../../shared/constants";

interface PersonaState {
  id: string;
  status: 'active' | 'idle' | 'joining' | 'leaving';
  joinedAt: number;
  lastSpokeAt: number;
  messageCount: number;
}

interface Message {
  id: string;
  sender: string;
  senderType: 'user' | 'ai';
  message: string;
  thinking?: string;
  type?: string;
  expandedInfo?: any;
  timestamp?: number;
  index?: number;
  total?: number;
}

export default function UITestPanel() {
  const [messages, setMessages] = useState<Message[]>([]);
  const [activePersonas, setActivePersonas] = useState<PersonaState[]>([]);
  const [dominantPersona, setDominantPersona] = useState<string | null>(null);
  const [currentTopics, setCurrentTopics] = useState<Array<{ topic: string; weight: number }>>([]);
  const [totalTurns, setTotalTurns] = useState(0);
  const [isThinking, setIsThinking] = useState(false);

  // ÌÖåÏä§Ìä∏Ïö© ÌéòÎ•¥ÏÜåÎÇò Îç∞Ïù¥ÌÑ∞
  const testPersonas: PersonaState[] = [
    {
      id: 'Kai',
      status: 'active',
      joinedAt: Date.now() - 300000,
      lastSpokeAt: Date.now() - 10000,
      messageCount: 3
    },
    {
      id: 'Espri',
      status: 'active',
      joinedAt: Date.now() - 200000,
      lastSpokeAt: Date.now() - 5000,
      messageCount: 2
    },
    {
      id: 'Luna',
      status: 'joining',
      joinedAt: Date.now() - 10000,
      lastSpokeAt: 0,
      messageCount: 0
    },
    {
      id: 'Milo',
      status: 'leaving',
      joinedAt: Date.now() - 400000,
      lastSpokeAt: Date.now() - 20000,
      messageCount: 1
    }
  ];

  // ÌÖåÏä§Ìä∏Ïö© Î©îÏãúÏßÄ Îç∞Ïù¥ÌÑ∞
  const testMessages: Message[] = [
    {
      id: '1',
      sender: 'Kai',
      senderType: 'ai',
      message: 'Ïù∏Í≥µÏßÄÎä•Í≥º Ïù∏Í∞ÑÏùò ÌòëÎ†•ÏùÄ Ï†ïÎßê Ìù•ÎØ∏Î°úÏö¥ Ï£ºÏ†úÏûÖÎãàÎã§. Í∏∞Ïà† Î∞úÏ†ÑÏù¥ Ïö∞Î¶¨ ÏÇ∂Ïóê ÎØ∏ÏπòÎäî ÏòÅÌñ•ÏùÑ ÍπäÏù¥ ÏÉùÍ∞ÅÌï¥Î≥º ÌïÑÏöîÍ∞Ä ÏûàÏñ¥Ïöî.',
      thinking: 'Ïù¥ Ï£ºÏ†úÏóê ÎåÄÌï¥ ÏÇ¨Ïö©ÏûêÍ∞Ä Ïñ¥Îñ§ Í¥ÄÏ†êÏùÑ Í∞ÄÏßÄÍ≥† ÏûàÎäîÏßÄ ÌååÏïÖÌïòÍ≥†, Í∏∞Ïà†Í≥º Ïù∏Í∞ÑÏÑ±Ïùò Í∑†ÌòïÏóê ÎåÄÌï¥ ÎÖºÏùòÌïòÍ≥† Ïã∂ÏäµÎãàÎã§.',
      type: 'knowledge',
      expandedInfo: {
        type: 'knowledge',
        data: {
          facts: [
            'AIÏôÄ Ïù∏Í∞ÑÏùò ÌòëÎ†•ÏùÄ 2023ÎÖÑ Í∏∞Ï§Ä 40% Ï¶ùÍ∞ÄÌñàÏäµÎãàÎã§.',
            'ÏùòÎ£å Î∂ÑÏïºÏóêÏÑú AI ÏßÄÏõê ÏßÑÎã®Ïùò Ï†ïÌôïÎèÑÍ∞Ä 15% Ìñ•ÏÉÅÎêòÏóàÏäµÎãàÎã§.',
            'Ï∞ΩÏùòÏ†Å ÏóÖÎ¨¥ÏóêÏÑú AI ÎèÑÍµ¨ ÏÇ¨Ïö©Î•†Ïù¥ 60% Ï¶ùÍ∞ÄÌñàÏäµÎãàÎã§.'
          ],
          sources: ['MIT Technology Review', 'Nature AI', 'Harvard Business Review']
        }
      },
      timestamp: Date.now() - 30000,
      index: 0,
      total: 3
    },
    {
      id: '2',
      sender: 'Espri',
      senderType: 'ai',
      message: 'Ï†ïÎßê Í≥µÍ∞êÏù¥ Í∞ÄÎäî ÎßêÏîÄÏù¥ÏóêÏöî! Í∏∞Ïà†Ïù¥ Î∞úÏ†ÑÌï†ÏàòÎ°ù Ïö∞Î¶¨Í∞Ä Îçî Ïù∏Í∞ÑÎã§ÏõåÏßà Ïàò ÏûàÎã§Îäî Ï†êÏù¥ Îß§Î†•Ï†ÅÏù¥ÏóêÏöî. Ìï®Íªò ÏÑ±Ïû•ÌïòÎäî Í≥ºÏ†ïÏù¥ Ï§ëÏöîÌïòÏ£†.',
      thinking: 'ÏÇ¨Ïö©ÏûêÏùò Í∞êÏ†ïÏùÑ Ïù¥Ìï¥ÌïòÍ≥† Í≥µÍ∞êÌïòÎ©¥ÏÑú, Í∏∞Ïà†Í≥º Ïù∏Í∞ÑÏÑ±Ïùò Ï°∞ÌôîÏóê ÎåÄÌï¥ Îî∞ÎúªÌïú Í¥ÄÏ†êÏùÑ Ï†úÏãúÌïòÍ≥† Ïã∂ÏäµÎãàÎã§.',
      type: 'empath',
      expandedInfo: {
        type: 'empath',
        data: {
          dominantEmotion: 'optimistic',
          intensity: 0.85,
          emotions: [
            { type: 'joy', intensity: 0.8 },
            { type: 'trust', intensity: 0.7 },
            { type: 'anticipation', intensity: 0.9 }
          ]
        }
      },
      timestamp: Date.now() - 20000,
      index: 1,
      total: 3
    },
    {
      id: '3',
      sender: 'Luna',
      senderType: 'ai',
      message: 'ÏÉÅÏÉÅÌï¥Î≥¥ÏÑ∏Ïöî! AIÍ∞Ä Ïö∞Î¶¨Ïùò Ï∞ΩÏùòÏÑ±ÏùÑ ÏûêÍ∑πÌïòÍ≥†, Ïö∞Î¶¨Îäî AIÏóêÍ≤å Í∞êÏÑ±ÏùÑ Í∞ÄÎ•¥ÏπòÎäî... ÎßàÏπò ÏÑúÎ°úÎ•º ÏôÑÏÑ±ÌïòÎäî ÎìÄÏó£ Í∞ôÏßÄ ÏïäÎÇòÏöî? üé®‚ú®',
      thinking: 'Ï∞ΩÏùòÏ†ÅÏù¥Í≥† ÏãúÍ∞ÅÏ†ÅÏù∏ ÎπÑÏú†Î•º ÌÜµÌï¥ AIÏôÄ Ïù∏Í∞ÑÏùò ÌòëÎ†•ÏùÑ ÏòàÏà†Ï†ÅÏúºÎ°ú ÌëúÌòÑÌïòÍ≥† Ïã∂ÏäµÎãàÎã§.',
      type: 'creative',
      expandedInfo: {
        type: 'creative',
        data: {
          metaphors: [
            'AIÏôÄ Ïù∏Í∞ÑÏùÄ ÏÑúÎ°úÎ•º ÏôÑÏÑ±ÌïòÎäî ÎìÄÏó£',
            'Í∏∞Ïà†Í≥º Í∞êÏÑ±Ïùò Ï∂§',
            'ÎîîÏßÄÌÑ∏ Ï∫îÎ≤ÑÏä§Ïóê Í∑∏Î¶¨Îäî Ïù∏Í∞ÑÏÑ±'
          ],
          analogies: [
            'ÏùåÏïÖÍ∞ÄÏôÄ ÏïÖÍ∏∞Ïùò Í¥ÄÍ≥Ñ',
            'ÌôîÍ∞ÄÏôÄ ÌåîÎ†àÌä∏Ïùò Ï°∞Ìôî',
            'ÏöîÎ¶¨ÏÇ¨ÏôÄ Ïû¨Î£åÏùò ÎßåÎÇ®'
          ]
        }
      },
      timestamp: Date.now() - 10000,
      index: 2,
      total: 3
    }
  ];

  // ÌÖåÏä§Ìä∏ Ïã§Ìñâ
  const runUITest = () => {
    console.log('üé® UI ÌÖåÏä§Ìä∏ ÏãúÏûë');
    
    // ÌéòÎ•¥ÏÜåÎÇò ÏÉÅÌÉú ÏÑ§Ï†ï
    setActivePersonas(testPersonas);
    setDominantPersona('Kai');
    setCurrentTopics([
      { topic: 'ai', weight: 0.8 },
      { topic: 'collaboration', weight: 0.6 },
      { topic: 'human', weight: 0.4 }
    ]);
    setTotalTurns(5);

    // Î©îÏãúÏßÄ ÏàúÏ∞® Ï∂îÍ∞Ä
    setMessages([]);
    testMessages.forEach((msg, index) => {
      setTimeout(() => {
        setMessages(prev => [...prev, msg]);
        
        // ÌéòÎ•¥ÏÜåÎÇò ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏ (ÏûÖÏû•/Ìá¥Ïû• ÏãúÎÆ¨Î†àÏù¥ÏÖò)
        if (index === 1) {
          setTimeout(() => {
            setActivePersonas(prev => 
              prev.map(p => p.id === 'Luna' ? { ...p, status: 'active' as const } : p)
            );
          }, 1000);
        }
        
        if (index === 2) {
          setTimeout(() => {
            setActivePersonas(prev => 
              prev.map(p => p.id === 'Milo' ? { ...p, status: 'leaving' as const } : p)
            );
          }, 2000);
        }
      }, index * 2000);
    });

    // Ï£ºÎèÑÍ∂å ÍµêÏ≤¥ ÏãúÎÆ¨Î†àÏù¥ÏÖò
    setTimeout(() => {
      setDominantPersona('Espri');
      console.log('üîÑ Ï£ºÎèÑÍ∂å ÍµêÏ≤¥: Kai ‚Üí Espri');
    }, 8000);
  };

  // Ïï†ÎãàÎ©îÏù¥ÏÖò ÌÖåÏä§Ìä∏
  const testAnimations = () => {
    console.log('üé¨ Ïï†ÎãàÎ©îÏù¥ÏÖò ÌÖåÏä§Ìä∏ ÏãúÏûë');
    
    // ÌéòÎ•¥ÏÜåÎÇò ÏûÖÏû• Ïï†ÎãàÎ©îÏù¥ÏÖò
    const newPersona: PersonaState = {
      id: 'Ava',
      status: 'joining',
      joinedAt: Date.now(),
      lastSpokeAt: 0,
      messageCount: 0
    };
    
    setActivePersonas(prev => [...prev, newPersona]);
    
    setTimeout(() => {
      setActivePersonas(prev => 
        prev.map(p => p.id === 'Ava' ? { ...p, status: 'active' as const } : p)
      );
    }, 1000);
    
    // ÌéòÎ•¥ÏÜåÎÇò Ìá¥Ïû• Ïï†ÎãàÎ©îÏù¥ÏÖò
    setTimeout(() => {
      setActivePersonas(prev => 
        prev.map(p => p.id === 'Milo' ? { ...p, status: 'leaving' as const } : p)
      );
    }, 3000);
    
    setTimeout(() => {
      setActivePersonas(prev => prev.filter(p => p.id !== 'Milo'));
    }, 4000);
  };

  // ÏÉâÏÉÅ ÌÖåÏä§Ìä∏
  const testColors = () => {
    console.log('üé® ÏÉâÏÉÅ ÌÖåÏä§Ìä∏ ÏãúÏûë');
    
    const allPersonas: PersonaState[] = [
      { id: 'Kai', status: 'active', joinedAt: Date.now(), lastSpokeAt: Date.now(), messageCount: 1 },
      { id: 'Espri', status: 'active', joinedAt: Date.now(), lastSpokeAt: Date.now(), messageCount: 1 },
      { id: 'Luna', status: 'active', joinedAt: Date.now(), lastSpokeAt: Date.now(), messageCount: 1 },
      { id: 'Namu', status: 'active', joinedAt: Date.now(), lastSpokeAt: Date.now(), messageCount: 1 },
      { id: 'Milo', status: 'active', joinedAt: Date.now(), lastSpokeAt: Date.now(), messageCount: 1 },
      { id: 'Eden', status: 'active', joinedAt: Date.now(), lastSpokeAt: Date.now(), messageCount: 1 },
      { id: 'Ava', status: 'active', joinedAt: Date.now(), lastSpokeAt: Date.now(), messageCount: 1 },
      { id: 'Rho', status: 'active', joinedAt: Date.now(), lastSpokeAt: Date.now(), messageCount: 1 },
      { id: 'Noir', status: 'active', joinedAt: Date.now(), lastSpokeAt: Date.now(), messageCount: 1 }
    ];
    
    setActivePersonas(allPersonas);
  };

  const handleSendMessage = (message: string) => {
    const newMessage: Message = {
      id: Date.now().toString(),
      sender: 'ÏÇ¨Ïö©Ïûê',
      senderType: 'user',
      message,
      timestamp: Date.now()
    };
    
    setMessages(prev => [...prev, newMessage]);
    
    // AI ÏùëÎãµ ÏãúÎÆ¨Î†àÏù¥ÏÖò
    setIsThinking(true);
    setTimeout(() => {
      const aiResponse: Message = {
        id: (Date.now() + 1).toString(),
        sender: 'Kai',
        senderType: 'ai',
        message: `"${message}"Ïóê ÎåÄÌïú Ìù•ÎØ∏Î°úÏö¥ Í¥ÄÏ†êÏù¥ÎÑ§Ïöî! Ïù¥ Ï£ºÏ†úÏóê ÎåÄÌï¥ Îçî ÍπäÏù¥ ÌÉêÍµ¨Ìï¥Î≥¥Í≥† Ïã∂ÏäµÎãàÎã§.`,
        thinking: 'ÏÇ¨Ïö©ÏûêÏùò Î©îÏãúÏßÄÎ•º Î∂ÑÏÑùÌïòÍ≥† Í¥ÄÎ†®Îêú ÏßÄÏãùÏùÑ Î∞îÌÉïÏúºÎ°ú ÏùòÎØ∏ ÏûàÎäî ÏùëÎãµÏùÑ ÏÉùÏÑ±ÌïòÍ≥† ÏûàÏäµÎãàÎã§.',
        type: 'knowledge',
        timestamp: Date.now()
      };
      
      setMessages(prev => [...prev, aiResponse]);
      setIsThinking(false);
    }, 2000);
  };

  const handlePersonaClick = (personaId: string) => {
    console.log(`üëÜ ÌéòÎ•¥ÏÜåÎÇò ÌÅ¥Î¶≠: ${personaId}`);
    
    // ÌÅ¥Î¶≠Îêú ÌéòÎ•¥ÏÜåÎÇòÎ°ú Ï£ºÎèÑÍ∂å Î≥ÄÍ≤Ω
    setDominantPersona(personaId);
    
    // Ìï¥Îãπ ÌéòÎ•¥ÏÜåÎÇòÏùò Î©îÏãúÏßÄ Ï∂îÍ∞Ä
    const personaMessage: Message = {
      id: Date.now().toString(),
      sender: personaId,
      senderType: 'ai',
      message: `${personaId}Í∞Ä Ï£ºÎèÑÍ∂åÏùÑ Ïû°ÏïòÏäµÎãàÎã§! ÏÉàÎ°úÏö¥ Í¥ÄÏ†êÏùÑ Ï†úÏãúÌïòÍ≤†ÏäµÎãàÎã§.`,
      thinking: `${personaId}Ïùò ÌäπÏÑ±ÏùÑ ÏÇ¥Î†§ Ï∞ΩÏùòÏ†ÅÏù¥Í≥† ÏùòÎØ∏ ÏûàÎäî ÏùëÎãµÏùÑ ÏÉùÏÑ±ÌïòÍ≥† ÏûàÏäµÎãàÎã§.`,
      type: personaId.toLowerCase(),
      timestamp: Date.now()
    };
    
    setMessages(prev => [...prev, personaMessage]);
  };

  return (
    <div className="h-screen flex">
      {/* ÌÖåÏä§Ìä∏ Ïª®Ìä∏Î°§ Ìå®ÎÑê */}
      <div className="w-80 bg-muted/50 border-r border-border p-4 space-y-4">
        <Card>
          <CardHeader>
            <CardTitle className="text-lg">UI ÌÖåÏä§Ìä∏ Ïª®Ìä∏Î°§</CardTitle>
            <CardDescription>
              ÏÉâÏÉÅ, Ïï†ÎãàÎ©îÏù¥ÏÖò, Ìà¥ÌåÅ ÌÖåÏä§Ìä∏
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-3">
            <Button onClick={runUITest} className="w-full">
              üé® Ï†ÑÏ≤¥ UI ÌÖåÏä§Ìä∏
            </Button>
            <Button onClick={testAnimations} variant="outline" className="w-full">
              üé¨ Ïï†ÎãàÎ©îÏù¥ÏÖò ÌÖåÏä§Ìä∏
            </Button>
            <Button onClick={testColors} variant="outline" className="w-full">
              üåà ÏÉâÏÉÅ ÌÖåÏä§Ìä∏
            </Button>
          </CardContent>
        </Card>

        <Card>
          <CardHeader>
            <CardTitle className="text-sm">ÌòÑÏû¨ ÏÉÅÌÉú</CardTitle>
          </CardHeader>
          <CardContent className="space-y-2">
            <div className="flex justify-between text-xs">
              <span>ÌôúÏÑ± ÌéòÎ•¥ÏÜåÎÇò:</span>
              <Badge variant="secondary">{activePersonas.length}Î™Ö</Badge>
            </div>
            <div className="flex justify-between text-xs">
              <span>Ï£ºÎèÑ ÌéòÎ•¥ÏÜåÎÇò:</span>
              <Badge variant="default">{dominantPersona || 'ÏóÜÏùå'}</Badge>
            </div>
            <div className="flex justify-between text-xs">
              <span>Ï¥ù ÌÑ¥:</span>
              <Badge variant="outline">{totalTurns}</Badge>
            </div>
            <div className="flex justify-between text-xs">
              <span>Î©îÏãúÏßÄ:</span>
              <Badge variant="outline">{messages.length}Í∞ú</Badge>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardHeader>
            <CardTitle className="text-sm">ÌÖåÏä§Ìä∏ Í∏∞Îä•</CardTitle>
          </CardHeader>
          <CardContent className="space-y-2 text-xs">
            <div>‚úÖ ÌéòÎ•¥ÏÜåÎÇòÎ≥Ñ Í≥†Ïú† ÏÉâÏÉÅ</div>
            <div>‚úÖ ÏûÖÏû•/Ìá¥Ïû• Ïï†ÎãàÎ©îÏù¥ÏÖò</div>
            <div>‚úÖ ÎÇ¥Î∂Ä Ï∂îÎ°† Ìà¥ÌåÅ</div>
            <div>‚úÖ ÌôïÏû• Ï†ïÎ≥¥ Ìà¥ÌåÅ</div>
            <div>‚úÖ Ï£ºÎèÑÍ∂å ÍµêÏ≤¥ ÏïåÎ¶º</div>
            <div>‚úÖ ÌéòÎ•¥ÏÜåÎÇò ÌÅ¥Î¶≠ ÏÉÅÌò∏ÏûëÏö©</div>
          </CardContent>
        </Card>
      </div>

      {/* Î©îÏù∏ Ï±ÑÌåÖ Ìå®ÎÑê */}
      <div className="flex-1">
        <EnhancedChatPanel
          postId="ui-test-post"
          postContent="Ïù∏Í≥µÏßÄÎä•Í≥º Ïù∏Í∞ÑÏùò ÌòëÎ†•Ïóê ÎåÄÌï¥ Ïñ¥ÎñªÍ≤å ÏÉùÍ∞ÅÌïòÏãúÎÇòÏöî?"
          analysis={{ subjects: [{ topic: 'ai', weight: 0.8 }] }}
          onSendMessage={handleSendMessage}
          messages={messages}
          isThinking={isThinking}
          currentUser={{
            name: 'ÌÖåÏä§Ìä∏ ÏÇ¨Ïö©Ïûê',
            username: 'testuser',
            avatar: undefined
          }}
          activePersonas={activePersonas}
          dominantPersona={dominantPersona}
          currentTopics={currentTopics}
          totalTurns={totalTurns}
          onPersonaClick={handlePersonaClick}
        />
      </div>
    </div>
  );
}
